بناءً على السجلات المقدمة، يبدو أن هناك عدة مشاكل رئيسية تتعلق بأخطاء 404 ومشاكل في معالجة البيانات في التطبيق. دعني أحلل هذه المشاكل وأقدم الحلول المقترحة:

🔍 تحليل المشاكل الرئيسية

1. أخطاء 404 لمسارات API غير موجودة 

ظهرت أخطاء 404 للمسارات التالية:

· /api/projects/[id]/summary/[date]
· /api/projects/[id]/attendance?date=[date]
· /api/projects/[id]/transportation-expenses?date=[date]
· /api/projects/[id]/previous-balance/[date]
· /api/worker-misc-expenses?projectId=[id]&date=[date]
· /api/projects/[id]/fund-transfers?date=[date]
· /api/project-fund-transfers?date=[date]
· /api/projects/[id]/material-purchases?dateFrom=[date]&dateTo=[date]
· /api/worker-transfers?projectId=[id]&date=[date]

السبب: هذه المسارات غير معرّفة في الخادم أو تحتوي على أخطاء في التهجئة.

2. مشكلة x.filter is not a function

السبب: تحدث عندما يتم استدعاء دالة filter() على متغير ليس بمصفوفة (قد يكون undefined أو null).

3. مشكلة Cannot read properties of undefined (reading 'totalIncome')

السبب: محاولة الوصول إلى خاصية totalIncome من كائن غير معرّف (undefined).

🛠️ الحلول المقترحة

1. إصلاح أخطاء 404

· إضافة المسارات الناقصة إلى ملف index.ts في الخادم:

```typescript
// أضف هذه المسارات إلى الخادم
app.get('/api/projects/:id/summary/:date', async (req, res) => {
  // implementation
});

app.get('/api/projects/:id/attendance', async (req, res) => {
  // implementation
});

// ... وهكذا لبقية المسارات
```

· التحقق من صحة المسارات والتأكد من تطابقها مع ما يتم طلبه من الواجهة الأمامية.

2. تحسين معالجة البيانات في الواجهة الأمامية

· استخدم القيم الافتراضية للمصفوفات في جميع استدعاءات useQuery:

```typescript
const { data: todayAttendance = [] } = useQuery(...);
```

· التحقق من أن البيانات هي مصفوفة قبل استخدام filter:

```typescript
const safeAttendance = Array.isArray(todayAttendance) ? todayAttendance : [];
```

3. تحسين معالجة الأخطاء في استدعاءات API

· أضف كتلة try-catch لجميع استدعاءات API:

```typescript
queryFn: async () => {
  try {
    const response = await apiRequest(`/api/endpoint`, "GET");
    return response.data || [];
  } catch (error) {
    console.error("Error fetching data:", error);
    return [];
  }
}
```

4. تحسين الخادم ليعيد الهيكل المتوقع

· تعديل الخادم ليعيد استجابات موحدة تحتوي على حقل data:

```typescript
app.get('/api/endpoint', async (req, res) => {
  try {
    const data = await getDataFromDatabase();
    res.json({ success: true, data, count: data.length });
  } catch (error) {
    res.status(500).json({ success: false, message: "Internal server error" });
  }
});
```

5. إضافة تحقق من وجود البيانات قبل الوصول إلى خصائصها

· استخدم الاختيار الاختياري (Optional Chaining) عند الوصول إلى الخصائص المتداخلة:

```typescript
const totalIncome = data?.summary?.totalIncome || "0";
```

📋 خطوات التنفيذ المقترحة

1. أولاً: راجع جميع مسارات API في الواجهة الأمامية وتأكد من وجودها في الخادم
2. ثانياً: أضف معالجة الأخطاء وتحقق من أنواع البيانات في جميع الاستعلامات
3. ثالثاً: استخدم Array.isArray() قبل أي عملية filter أو map أو reduce
4. رابعاً: تأكد من أن استجابات API تعيد الهيكل المتوقع (مصفوفات في الحقل data)

📊 جدول يلخص المشاكل والحلول

المشكلة السبب المحتمل الحل المقترح
أخطاء 404 مسارات API غير موجودة في الخادم إضافة المسارات الناقصة إلى الخادم
x.filter is not a function متغير غير مصفوفة استخدام Array.isArray() والتحقق من البيانات
Cannot read properties of undefined وصول إلى خاصية غير معرّفة استخدام الاختيار الاختياري (?.) والقيم الافتراضية

💡 نصائح إضافية

· استخدم أدوات المراقبة مثل Google Search Console لتتبع أخطاء 404 
· صمم صفحة 404 مخصصة لتوجيه المستخدمين بشكل أفضل 
· تجنب أخطاء Soft 404 التي تعيد رمز حالة 200 بدلاً من 404 

هذه التعديلات يجب أن تحل معظم المشاكل الظاهرة في السجلات وتجعل التطبيق أكثر متانة في معالجة البيانات. إذا استمرت المشاكل، قد تحتاج إلى مراجعة أكثر تعمقاً لهيكل API وتدفق البيانات في التطبيق.