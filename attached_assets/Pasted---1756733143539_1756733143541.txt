ممتاز — شفت الصورة وملفّ اللوج. سأعطيك تقريرًا عميقًا، مُفصّلًا، مع أسباب مُحتملة مرتّبة بحسب الاحتمال، طرق تشخيص دقيقة (بـأوامر وأين تنظر بالمتصفح وبلوحة Vercel)، وحلول عملية/قابلة للتطبيق لكل حالة — بحيث إذا واجهت مشكلة مماثلة تعرف بالضبط ماذا تفعل.

ملخّص سريع لما أراه من اللوج والصورة

البناء نجح (Vite + esbuild)، ونتج dist/public وبعض ملفات JS كبيرة (dist/index.js ~770KB).

عند فتح الموقع يظهر نص كود جافاسكربت (bundle) بدلاً من صفحة HTML. هذا يعني أن المستعرض حصل على ملف JS كنص بدلاً من عرض صفحة HTML — عادة لأنّ المسار الجذر/route يشير مباشرة إلى ملف JS أو الخادم أعاد محتوى JS مع Content-Type غير مناسب أو إعادة التوجيه خاطئة.

هناك تحذيرات/ملاحظات حول حزم كبيرة وpnpm approve-builds لكن هذه للمبنى وليس لسبب العرض كـنص.


الأسباب الأكثر احتمالاً (مرتّبة)

1. الـ routing خاطئ على Vercel — المسار / مهيأ ليُعيد ملف JS (أو وظيفة serverless تُرجع محتوى JS) بدلاً من index.html.


2. لا يوجد ملف index.html في المجلد الذي تُقدّم منه الملفات الثابتة (أو تم بناء SPA في dist/public ولكن Vercel يقدّم dist/index.js كافتراضي).


3. خدمة Express/server تُعيد محتوى ملف جافاسكربت بالخطأ — مثلاً res.sendFile(pathToBundle) أو fs.readFileSync بدلاً من تقديم index.html.


4. إعدادات vercel.json متضاربة/خاطئة — (مثلاً استخدام functions و builds بشكل غير متوافق أو توجيه خاطئ في routes).


5. تم إعداد مسارات (routes) بحيث تُعيد الملفات الخام (مثل ملفات السيرفر) بدلاً من ملفات الـ static.


6. احتمال أقل: نوع المحتوى (Content-Type) مُعيّن إلى text/plain عند إعادة الملف، لذلك المتصفح يعرضه كنص. يحدث هذا إذا كانت استجابة الدالة تُعيد النص ولا تضبط الهيدر Content-Type: text/html أو application/javascript بشكل سليم.




---

كيف تشخص المشكلة خطوة بخطوة (بالتفصيل — افعل هذه الخطوات الآن)

1. افتح الموقع في المتصفح ثم افتح DevTools → Network

أعد تحميل الصفحة.

انظر للطلب إلى / (أو إلى أي مسار يظهر كـ 200).

افحص: Status, URL, وResponse headers → خصوصًا content-type.

إذا كان الرد هو ملف JS أو content-type: text/plain أو application/javascript فهذا يؤكد أن جلبت ملف JS بدل HTML.



2. انظر إلى Response (عرض المصدر) مباشرة في Network

إذا ترى كود bundle (نفس ما في الصورة) فهذا يعني مباشرة أن الملف المرسل هو JS.



3. تحقق من Vercel Dashboard → Deployment → Files / Routes / Functions

افتح النسخة المنشورة في Vercel Dashboard.

تفقد Files: هل يوجد index.html ضمن المسارات؟ هل dist/public/index.html موجود؟

تفقد Functions: هل هنالك دوال تُعيد المحتوى؟ ما هي الـ entrypoints؟

تفقد Routes: هل يوجد route يعيد /dist/index.js أو يوجّه / إلى ملف خاطئ؟



4. راجع vercel.json في المستودع (أهم خطوة)

انسخ هنا محتوى vercel.json إن أردت تدقيقه (لكن سواصل بدونه).

ابحث عن أقسام builds, functions, routes, outputDirectory، public إلخ.



5. شغّل محليًا كما تفعل Vercel

شغّل البناء محليًا:

pnpm build    # أو npm run build
npx serve dist/public    # او npx serve dist   (لتجربة التقديم كـ static)

أو استخدم: npx vercel dev لرؤية كيف يعرض Vercel محليًا.



6. افحص الكود الخادم (إذا تستخدم Express/server)

ابحث إن كانت علامة res.sendFile(...) أو fs.readFileSync تُشير إلى ملف JS عن طريق الخطأ.

تأكد أن الخادم عندما يستجيب للـ GET / يقدّم index.html.





---

حلول عملية (اعتمادًا على السيناريو)

سيناريو A — مشروع Vite SPA (Static)

إذا تطبيقك صفحة واحدة (SPA) مبنيّة بـ Vite والنتيجة في dist/public أو dist:

خطوات الحل:

1. تأكد أن package.json فيه "build": "vite build".


2. أضف/استخدم vercel.json مثل هذا (مناسب لـ dist/public كما في لوجك):



{
  "version": 2,
  "builds": [
    {
      "src": "package.json",
      "use": "@vercel/static-build",
      "config": { "distDir": "dist/public" }
    }
  ],
  "routes": [
    { "src": "/(.*)", "dest": "/index.html" }
  ]
}

> ملاحظة: إن كانت نتائج البناء في dist فقط (وليس dist/public) غيّر distDir إلى "dist".



3. احذف أي functions أو بناءات Node التي تتداخل مع تقديم الـ static (في vercel.json). لا تخلط functions و builds بطريقة خاطئة.



سيناريو B — مشروع يستخدم Express / خادم Node مخصّص

إذا لديك خادم (Express) وتريد نشره كـ serverless function أو كمشروع Node:

مثال vercel.json لتوجيه الـ API لملف الخادم مع بقية الموقع statics:

{
  "version": 2,
  "builds": [
    { "src": "server/index.ts", "use": "@vercel/node" }, 
    { "src": "package.json", "use": "@vercel/static-build", "config": { "distDir": "dist/public" } }
  ],
  "routes": [
    { "src": "/api/(.*)", "dest": "server/index.ts" },
    { "src": "/(.*)", "dest": "/index.html" }
  ]
}

وفي server/index.ts تأكد أن لديك مسارات /api/* فقط، وليس إعادة محتوى الصفحة الرئيسية كـ bundle. إذا الخادم يعيد dist/index.js تأكد من إصلاح res.sendFile.

سيناريو C — إذا دالة serverless تُعيد ملف JS بالخطأ

افحص كود الدالة: بدلًا من return fs.readFileSync('dist/index.js','utf8') يجب أن تُعيد res.sendFile(path.join(__dirname,'public','index.html')) أو res.setHeader('content-type','text/html') ثم إرسال الـ HTML.

مثال Express للـ index:


app.use(express.static(path.join(__dirname, '..', 'public')));
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'public', 'index.html'));
});


---

نصائح لتحسين التجربة (وأخطاء شائعة رأيتها في لوجك)

لديك حزمة @vercel/node وعمليات esbuild server/index.ts — تأكد إنك لا تُخرِج ملف server bundle في dist/index.js بنفس اسمٍ يخلق تعارضًا مع ملفات الـ static.

تحذيرات chunk size: قلّل الـ bundle عن طريق dynamic import() أو تقسيم الحزم (مثلاً exceljs و jspdf تُضيف حجمًا كبيرًا؛ اجعلها lazy-load أو استخدم بديل خفيف للعميل).

لو أردت الـ maxDuration أو إعدادات وظائف مخصّصة، استخدم functions فقط ولا تخلط مع builds (سبق ناقشنا ذلك).

استخدم vercel dev لاختبار كيف سيتصرف Vercel محليًا قبل النشر.



---

تشخيص سريع قابل للتنفيذ الآن (نفّذ هذه الأوامر واحصل على إجابات)

1. شغّل البناء محليًا ثم قدّم المجلد:



pnpm build
npx serve dist/public    # افتح http://localhost:5000

— إذا ظهرت الصفحة صحيحة محليًا فالمشكلة في إعدادات Vercel (routes / vercel.json).

2. في المتصفح للفُرع المنشور: افتح DevTools → Network → اختر الطلب / → انسخ محتوى Response واطرحه هنا أو انظر content-type.



انسخ لي content-type و URL و Response preview إن أردت تحليلًا أدق.



---

ملخص تنفيذي (ماذا افعل الآن فورًا)

1. افتح ملف vercel.json واحذف أي تداخل بين functions و builds.


2. إذا مشروعك SPA: استخدم @vercel/static-build مع distDir الصحيح (dist/public أو dist). وأضف route fallback إلى index.html.


3. إذا تستخدم خادم Express: تأكد أن الخادم يخدم index.html وملفات static بشكل صحيح، واجعل مسارات API منفصلة (/api/*). ثم جهّز vercel.json لبناء الدالة وخدمة static معًا.


4. تحقق في DevTools (Network) لمعرفة ما يعيده السيرفر فعلاً (Content-Type والملف).




---

أستطيع الآن:

أ) مراجعة vercel.json الخاص بمشروعك وإعطاؤك نسخة صحيحة جاهزة للنشر. (انسخ محتواه هنا).

ب) أو إعطاؤك ملف vercel.json مهيأ للـ Vite SPA أو للـ Express + Vite (أرفعه أي خيار تريده وسأكتبه فورًا).


أيّ خيار تريد؟ أعدك بأن أزودك بالملف الجاهز + تفسير لماذا يصلح لملفك بالضبط.

